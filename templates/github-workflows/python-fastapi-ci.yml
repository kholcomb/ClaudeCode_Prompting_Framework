name: Python FastAPI CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run code formatting check
      run: |
        black --check .
        isort --check-only .
        
    - name: Run linting
      run: |
        flake8 .
        mypy app/
        
    - name: Run security checks
      run: |
        bandit -r app/
        safety check
        
    - name: Setup test database
      run: |
        alembic upgrade head
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: test
        
    - name: Run tests with coverage
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html tests/
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: test
        SECRET_KEY: test-secret-key
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Test application startup
      run: |
        timeout 30 uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/docs || exit 1
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        ENVIRONMENT: test

  api-tests:
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install httpx pytest-asyncio
        
    - name: Setup test database
      run: |
        alembic upgrade head
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        
    - name: Start API server
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        ENVIRONMENT: test
        SECRET_KEY: test-secret-key
        
    - name: Run API integration tests
      run: |
        pytest tests/integration/ -v
      env:
        API_BASE_URL: http://localhost:8000
        
    - name: Test OpenAPI documentation
      run: |
        curl -f http://localhost:8000/openapi.json > openapi.json
        python -c "import json; json.load(open('openapi.json'))"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety semgrep
        
    - name: Run Bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json
        
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json
        
    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto app/ --json --output=semgrep-report.json
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-app:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-app:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm -d -p 8000:8000 \
          -e DATABASE_URL=sqlite:///./test.db \
          -e ENVIRONMENT=test \
          --name test-container \
          ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-app:${{ github.sha }}
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-container

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, api-tests, security]
    if: github.ref == 'refs/heads/development'
    
    environment:
      name: staging
      url: ${{ secrets.STAGING_API_URL }}
    
    steps:
    - name: Deploy to staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /app
          git pull origin development
          source venv/bin/activate
          pip install -r requirements.txt
          alembic upgrade head
          sudo systemctl restart fastapi-staging
          
    - name: Run smoke tests
      run: |
        sleep 30
        curl -f ${{ secrets.STAGING_API_URL }}/health || exit 1
        curl -f ${{ secrets.STAGING_API_URL }}/docs || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, api-tests, security, docker]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: ${{ secrets.PRODUCTION_API_URL }}
    
    steps:
    - name: Deploy to production via Docker
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-app:${{ github.sha }}
          docker stop fastapi-production || true
          docker rm fastapi-production || true
          docker run -d \
            --name fastapi-production \
            -p 8000:8000 \
            -e DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }} \
            -e SECRET_KEY=${{ secrets.PRODUCTION_SECRET_KEY }} \
            -e ENVIRONMENT=production \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-app:${{ github.sha }}
            
    - name: Run production smoke tests
      run: |
        sleep 30
        curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1
        curl -f ${{ secrets.PRODUCTION_API_URL }}/docs || exit 1
        
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated FastAPI release from main branch
          
          ðŸ¤– Generated with Multi-Persona Development Framework
        draft: false
        prerelease: false